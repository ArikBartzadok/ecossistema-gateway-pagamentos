// Code generated by MockGen. DO NOT EDIT.
// Source: dominio/repositorio/repositorio.go

// Package mock_repositorio is a generated GoMock package.
package mock_repositorio

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepositorioTransacao is a mock of RepositorioTransacao interface.
type MockRepositorioTransacao struct {
	ctrl     *gomock.Controller
	recorder *MockRepositorioTransacaoMockRecorder
}

// MockRepositorioTransacaoMockRecorder is the mock recorder for MockRepositorioTransacao.
type MockRepositorioTransacaoMockRecorder struct {
	mock *MockRepositorioTransacao
}

// NewMockRepositorioTransacao creates a new mock instance.
func NewMockRepositorioTransacao(ctrl *gomock.Controller) *MockRepositorioTransacao {
	mock := &MockRepositorioTransacao{ctrl: ctrl}
	mock.recorder = &MockRepositorioTransacaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositorioTransacao) EXPECT() *MockRepositorioTransacaoMockRecorder {
	return m.recorder
}

// Inserir mocks base method.
func (m *MockRepositorioTransacao) Inserir(id, conta string, valor float64, status, mensagemErro string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inserir", id, conta, valor, status, mensagemErro)
	ret0, _ := ret[0].(error)
	return ret0
}

// Inserir indicates an expected call of Inserir.
func (mr *MockRepositorioTransacaoMockRecorder) Inserir(id, conta, valor, status, mensagemErro interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inserir", reflect.TypeOf((*MockRepositorioTransacao)(nil).Inserir), id, conta, valor, status, mensagemErro)
}
