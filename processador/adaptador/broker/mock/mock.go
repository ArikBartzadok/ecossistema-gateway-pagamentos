// Code generated by MockGen. DO NOT EDIT.
// Source: adaptador/broker/interface.go

// Package mock_broker is a generated GoMock package.
package mock_broker

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockInterfaceProdutor is a mock of InterfaceProdutor interface.
type MockInterfaceProdutor struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceProdutorMockRecorder
}

// MockInterfaceProdutorMockRecorder is the mock recorder for MockInterfaceProdutor.
type MockInterfaceProdutorMockRecorder struct {
	mock *MockInterfaceProdutor
}

// NewMockInterfaceProdutor creates a new mock instance.
func NewMockInterfaceProdutor(ctrl *gomock.Controller) *MockInterfaceProdutor {
	mock := &MockInterfaceProdutor{ctrl: ctrl}
	mock.recorder = &MockInterfaceProdutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterfaceProdutor) EXPECT() *MockInterfaceProdutorMockRecorder {
	return m.recorder
}

// Publicar mocks base method.
func (m *MockInterfaceProdutor) Publicar(mensagem interface{}, chave []byte, topico string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publicar", mensagem, chave, topico)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publicar indicates an expected call of Publicar.
func (mr *MockInterfaceProdutorMockRecorder) Publicar(mensagem, chave, topico interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publicar", reflect.TypeOf((*MockInterfaceProdutor)(nil).Publicar), mensagem, chave, topico)
}
